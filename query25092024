-------------------------- CORTEX SEARCH ----------------------------------------

CREATE ROLE CORTEX_SEARCH_TOKEN; -- CORTEXSEARCHTOKEN

select current_user();

GRANT ROLE CORTEX_SEARCH_TOKEN TO USER CORTEXSEARCHTOKEN;


----------------------db, schema , wh , table, stage ---------------------------------------
use role accountadmin;

-- Grant CREATE DATABASE privilege
GRANT CREATE DATABASE ON ACCOUNT TO ROLE CORTEX_SEARCH_TOKEN;

-- Grant CREATE WAREHOUSE privilege
GRANT CREATE WAREHOUSE ON ACCOUNT TO ROLE CORTEX_SEARCH_TOKEN;


use role CORTEX_SEARCH_TOKEN

-- create demo database
CREATE OR REPLACE DATABASE CORTEX_SEARCH_DB;

-- create schema
CREATE OR REPLACE SCHEMA CORTEX_SEARCH_SCHEMA;

CREATE OR REPLACE WAREHOUSE CORTEX_SEARCH_WH WITH
    WAREHOUSE_SIZE='X-SMALL'
    AUTO_SUSPEND = 120
    AUTO_RESUME = TRUE
    INITIALLY_SUSPENDED=TRUE;

USE WAREHOUSE CORTEX_SEARCH_WH;

CREATE OR REPLACE STAGE CORTEX_STAGE
    DIRECTORY = (ENABLE = TRUE)
    ENCRYPTION = (TYPE = 'SNOWFLAKE_SSE');

list @CORTEX_STAGE;

-----------------------------create funcation---------------------------------

CREATE OR REPLACE FUNCTION pdf_text_chunker(file_url STRING)
RETURNS TABLE (chunk VARCHAR)
LANGUAGE PYTHON
RUNTIME_VERSION = '3.9'
HANDLER = 'pdf_text_chunker'
PACKAGES = ('snowflake-snowpark-python', 'PyPDF2', 'langchain')
AS
$$
from snowflake.snowpark import types as T
from langchain.text_splitter import RecursiveCharacterTextSplitter
from snowflake.snowpark.files import SnowflakeFile
import PyPDF2, io
import logging

# Define the PDF text chunker class
class pdf_text_chunker:
    
    def read_pdf(self, file_url: str) -> str:
        logger = logging.getLogger("udf_logger")
        logger.info(f"Opening file {file_url}")
        
        # Open and read the PDF from the Snowflake stage
        with SnowflakeFile.open(file_url, 'rb') as f:
            buffer = io.BytesIO(f.read())
        
        # Use PyPDF2 to extract text from the PDF
        reader = PyPDF2.PdfReader(buffer)
        text = ""
        for page in reader.pages:
            try:
                text += page.extract_text().replace('\n', ' ').replace('\0', ' ')
            except:
                text = "Unable to Extract"
                logger.warning(f"Unable to extract from file {file_url}, page {page}")
        
        return text

    def process(self, file_url: str):
        # Extract text from the PDF file
        text = self.read_pdf(file_url)
        
        # Split the text into chunks using RecursiveCharacterTextSplitter
        text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=4000,  # Adjust chunk size as needed
            chunk_overlap=400,  # Some overlap for better context
            length_function=len
        )
        
        # Split the extracted text into chunks
        chunks = text_splitter.split_text(text)
        
        # Yield the chunks one by one
        for chunk in chunks:
            yield (chunk,)

$$;

---------------------create chunk table------------------------------------------------

CREATE OR REPLACE TABLE CHUNK_CORTEX_PDF (
    RELATIVE_PATH VARCHAR(16777216), 
    SIZE NUMBER(38, 0), 
    FILE_URL VARCHAR(16777216), 
    SCOPED_FILE_URL VARCHAR(16777216),
    CHUNK VARCHAR(16777216), 
    CHUNK_VEC VECTOR(FLOAT, 768) 
);

select * from CHUNK_CORTEX_PDF;

INSERT INTO CHUNK_CORTEX_PDF (relative_path, size, file_url, scoped_file_url, chunk, chunk_vec)
    SELECT
        relative_path,  
        size,           
        file_url,       
        build_scoped_file_url(@CORTEX_STAGE, relative_path) AS scoped_file_url, 
        func.chunk AS chunk,  -- Chunk from the pdf_text_chunker function
        SNOWFLAKE.CORTEX.EMBED_TEXT_768('e5-base-v2', func.chunk) AS chunk_vec 
    FROM
        DIRECTORY(@CORTEX_STAGE) AS dir,  
        TABLE(pdf_text_chunker(build_scoped_file_url(@CORTEX_STAGE, dir.relative_path))) AS func;  


------------------------cortex search service created--------------------------



CREATE OR REPLACE CORTEX SEARCH SERVICE CORTEX_SEARCH_DB.CORTEX_SEARCH_SCHEMA.PDF_CHUNK_SERVICE
  ON CHUNK
  ATTRIBUTES RELATIVE_PATH, FILE_URL, SCOPED_FILE_URL, CHUNK
  WAREHOUSE = CORTEX_SEARCH_WH
  TARGET_LAG = '1 hour'
  AS (
    SELECT * FROM CHUNK_CORTEX_PDF
  );


-----------------------------cortex search proc------------------------

CREATE OR REPLACE PROCEDURE cortex_search_procedure(
    search_query STRING,              
    filter_column STRING,              
    filter_value STRING,               
    result_limit INT                  
)
RETURNS VARIANT
LANGUAGE SQL
EXECUTE AS CALLER
AS
$$
    DECLARE
        json_query STRING;
    BEGIN
        -- Construct the JSON payload without explicit casting
        json_query := OBJECT_CONSTRUCT(
              'query', search_query,
              'columns', ARRAY_CONSTRUCT('CHUNK', 'RELATIVE_PATH', 'FILE_URL'),
              'filter', OBJECT_CONSTRUCT('@eq', OBJECT_CONSTRUCT(filter_column, filter_value)),
              'limit', result_limit
        );

        -- Call SEARCH_PREVIEW function
        RETURN PARSE_JSON(
            SNOWFLAKE.CORTEX.SEARCH_PREVIEW(
                'CORTEX_SEARCH_DB.CORTEX_SEARCH_SCHEMA.PDF_CHUNK_SERVICE',
                json_query
            )
        )['results'];
    END;
$$;



CALL cortex_search_procedure('Explain Oncology', 'RELATIVE_PATH', 'Cardiology_Comprehensive_Overview.pdf', 5);

------------------------------------------------------------------------------------------------------------------------------------

SHOW USERS;  --CORTEXSEARCHTOKEN

DESCRIBE USER CORTEXSEARCHTOKEN;


ALTER USER CORTEXSEARCHTOKEN SET RSA_PUBLIC_KEY='MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3mYXkRLA9a5RiRuufFGA
DSgwugWLckcf0/ZnBiz3cLgYwZ23sYZzMIkBljaUndJTIShIwBka9kslTxPbOFn3
0jae8mgAF+32cNwA4WxiinkxA2Qy5by5g0UWMpw9VQQacNJMF8Qcm+Bky9b56iD8
KmHe9Wlut5vLV2xo4sCY4U9PChlEp5s5FPsiSgpgx+9uq61yzty64A7gnBuE7XBj
g/HXWPDqasya4RVVY6sGFW92e3IYzZB8RolDNEjimSXWt2OfolUy0TzcniE7BGQC
Umb++7ZD8FFil6gcZr46gVfcB74NtXNzWfDYiHxXoPd75po8mk7ht5YRGdUIiY0v
YwIDAQAB';


DESC USER CORTEXSEARCHTOKEN;
SELECT SUBSTR((SELECT "value" FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))
  WHERE "property" = 'RSA_PUBLIC_KEY_FP'), LEN('SHA256:') + 1);           -- l0hKMVDy0FTIAp76wCd34Hd3/K9tuXAjh4JI2Y6NpT4=


SHOW USERS LIKE 'CORTEXSEARCHTOKEN';